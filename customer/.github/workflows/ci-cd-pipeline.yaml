name: CI/CD Pipeline for Customer API

on:
  push:
    branches:
      - main   # Trigger on push to the main branch
      - dev    # Trigger on push to the dev branch (for dev environments)
  pull_request:
    branches:
      - main   # Trigger on pull requests targeting the main branch

jobs:
  # Job 1: Build & Test the Application
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adoptopenjdk'

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build & Test Application
        run: mvn clean install -DskipTests

      - name: Run Unit Tests
        run: mvn test

      - name: Run Static Code Analysis (SonarQube)
        run: mvn sonar:sonar -Dsonar.projectKey=customer-api

  # Job 2: Build Docker Image and Push to Docker Registry (e.g., Docker Hub)
  docker-build-push:
    runs-on: ubuntu-latest
    needs: build-test  # Run after the build-test job

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/customer-api:$GITHUB_SHA .
          docker tag ${{ secrets.DOCKER_USERNAME }}/customer-api:$GITHUB_SHA ${{ secrets.DOCKER_USERNAME }}/customer-api:latest

      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/customer-api:$GITHUB_SHA
          docker push ${{ secrets.DOCKER_USERNAME }}/customer-api:latest

  # Job 3: Deploy to Staging Kubernetes Cluster (Automated)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build-push  # Run after docker-build-push job

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1

      - name: Set up Kubernetes Context
        run: |
          kubectl config set-cluster my-cluster --server=https://my-cluster-url --certificate-authority=/path/to/certificate
          kubectl config set-credentials my-user --token=${{ secrets.K8S_TOKEN }}
          kubectl config set-context my-context --cluster=my-cluster --user=my-user
          kubectl config use-context my-context

      - name: Deploy to Staging
        run: |
          kubectl apply -f kubernetes/deployment.yaml
          kubectl set image deployment/customer-api customer-api=${{ secrets.DOCKER_USERNAME }}/customer-api:$GITHUB_SHA

      - name: Run Integration Tests (Staging)
        run: |
          curl -s http://staging-url/health | grep "UP"